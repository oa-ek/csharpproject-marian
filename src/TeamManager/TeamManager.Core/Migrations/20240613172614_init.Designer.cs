// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamManager.Core.Contrext;

#nullable disable

namespace TeamManager.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240613172614_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdvertisementToFindGame", b =>
                {
                    b.Property<Guid>("AdvertisementsToFindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdvertisementsToFindId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("AdvertisementToFindGame");
                });

            modelBuilder.Entity("DeveloperGame", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DevelopersId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("DeveloperGame");
                });

            modelBuilder.Entity("GameGameAccount", b =>
                {
                    b.Property<Guid>("GameAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameAccountsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameAccount");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameLanguage", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("GameLanguage");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("32ccee4d-daa8-4021-a9f1-352cceafa207"),
                            ConcurrencyStamp = "32ccee4d-daa8-4021-a9f1-352cceafa207",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d01711c8-b8ab-4446-a475-913d35917369"),
                            ConcurrencyStamp = "d01711c8-b8ab-4446-a475-913d35917369",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("fcfc8ca2-8d03-427f-a89b-0f0651fcfaec"),
                            RoleId = new Guid("32ccee4d-daa8-4021-a9f1-352cceafa207")
                        },
                        new
                        {
                            UserId = new Guid("ce14fdbb-c6b0-48ed-b1be-758ef6ed6392"),
                            RoleId = new Guid("d01711c8-b8ab-4446-a475-913d35917369")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementForSales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("advertisementStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("gameAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("advertisementStatusId");

                    b.HasIndex("gameAccountId");

                    b.HasIndex("userId");

                    b.ToTable("AdvertisementsForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertisementStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("940c21f9-199f-4141-b472-fd09e956d5de"),
                            Name = "For Rent"
                        },
                        new
                        {
                            Id = new Guid("228670e3-5834-4f2f-aca9-714fe6f83a69"),
                            Name = "For Sale"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementToFind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("userGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("userGroupId");

                    b.HasIndex("userId");

                    b.ToTable("AdvertisementsToFind");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3846bf7-84d1-424d-a7f7-5061fe6ddb98"),
                            Name = "Rockstar Games"
                        },
                        new
                        {
                            Id = new Guid("39272d3d-e346-461a-a66c-fcffc056bfbc"),
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("f46d6514-9204-4f92-968e-d54f67569c4a"),
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            Id = new Guid("8407af0d-c8db-4a95-a5d8-d4a1f0bb0b26"),
                            Name = "Square Enix"
                        },
                        new
                        {
                            Id = new Guid("ac10c893-3bca-495e-b1d4-529123f7b22e"),
                            Name = "CD Projekt"
                        },
                        new
                        {
                            Id = new Guid("78919e1a-839a-41b1-b79e-6561f3f34909"),
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = new Guid("ea088839-590a-414d-9d85-feaa2cc49f25"),
                            Name = "Naughty Dog"
                        },
                        new
                        {
                            Id = new Guid("55e3270e-4374-4dec-b018-df485d5b1e6c"),
                            Name = "Valve Corporation"
                        },
                        new
                        {
                            Id = new Guid("e9f0594c-388c-4d25-a1c2-864a90a2449c"),
                            Name = "Epic Games"
                        },
                        new
                        {
                            Id = new Guid("dc9bff50-2eea-444a-83c7-caad3027e031"),
                            Name = "Activision Blizzard"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("accountPlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("accountPlatformId");

                    b.HasIndex("userId");

                    b.ToTable("GameAccounts");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("117ffaa5-56fc-49f7-ba7e-5f68dfffe5c4"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("08e1cde1-331d-4916-939d-6bc0b4efecb0"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("fefd611c-45a9-4309-9892-66480dd8b49d"),
                            Name = "Role-playing"
                        },
                        new
                        {
                            Id = new Guid("fbb92226-2091-4b1b-b4d8-1388812738e7"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("4e024ec7-2f7e-4570-829f-7ee4b00cdad2"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("cb28ea67-3b18-4aa6-a104-ffc6deb03b26"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("055e5d0b-f8e5-477d-831c-f3ebc97fbdbc"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("8599a34d-7c6a-4916-b129-abd99e8482ac"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("874458e6-54f3-40cf-9694-dde5ced7e120"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("9fa6bcd6-20a8-4175-afed-51b1011a2027"),
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7f61d58-a9bc-4009-a8a6-23d9f70eab6f"),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("0996d1a1-1363-453b-a30e-5f24961ddffe"),
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = new Guid("83115919-8f32-401d-b147-8bca818ae72d"),
                            Name = "French"
                        },
                        new
                        {
                            Id = new Guid("c827bb14-9bf6-4d47-9456-3c10d9021d9e"),
                            Name = "German"
                        },
                        new
                        {
                            Id = new Guid("e1a024b8-4cb3-46ca-8017-faec5e75298b"),
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("b135b596-5528-4e29-b06d-166b00af5cc5"),
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = new Guid("46888ef9-7155-4fec-85bd-76741e03cb5c"),
                            Name = "Russian"
                        },
                        new
                        {
                            Id = new Guid("d3754cce-ea43-4129-ba62-ba7e32595829"),
                            Name = "Italian"
                        },
                        new
                        {
                            Id = new Guid("e8de756c-a348-4402-a718-eb2f0c476c4a"),
                            Name = "Korean"
                        },
                        new
                        {
                            Id = new Guid("651c67a1-81a4-4854-ad7e-35d2f139ac24"),
                            Name = "Portuguese"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e011d7b3-eaea-4948-ada5-df9f0e6d81a2"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("7722a57a-dfa1-4427-aa6b-39462948187b"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("6c60d854-931b-4798-95d0-c8f17806b64e"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("11efca48-9c17-4de7-85ce-5fa759674adb"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("d6122068-d42f-412e-89b9-84191b253708"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("3a1a851c-ffe9-4508-aad3-650ff9873079"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("e4639d87-b513-43ad-9e46-8203fc228f9c"),
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("f055e144-66f2-477f-993c-6b4c7c469e32"),
                            Name = "Google Stadia"
                        },
                        new
                        {
                            Id = new Guid("e82bbf89-b832-441a-9a99-1ee3f408d939"),
                            Name = "VR"
                        },
                        new
                        {
                            Id = new Guid("116e5b6b-232d-451f-be59-5b9d54241333"),
                            Name = "Mac"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fcfc8ca2-8d03-427f-a89b-0f0651fcfaec"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7eae8844-dac7-4863-b404-ca85e1513879",
                            Email = "admin@example",
                            EmailConfirmed = true,
                            FullName = "Jack Rell",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE",
                            NormalizedUserName = "ADMIN@EXAMPLE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEXxv3nK5pI9XokfpZQ45k/mXwO0TnCJlVW7CrKa/QDOJKwjfQVPoMK8xEGllZ0fPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91432000-c331-478a-be0d-2901d7b772e9",
                            TwoFactorEnabled = false,
                            UserName = "admin@example"
                        },
                        new
                        {
                            Id = new Guid("ce14fdbb-c6b0-48ed-b1be-758ef6ed6392"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2128a94e-6c6d-4468-a775-7f1ea55da05b",
                            Email = "user1@example",
                            EmailConfirmed = true,
                            FullName = "Tom Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE",
                            NormalizedUserName = "USER1@EXAMPLE",
                            PasswordHash = "AQAAAAIAAYagAAAAEF6ejgPKQgn81WL8YKN9JUlEITAgcLhVTv6dpIVttg/hTdnVrFtU4EnMf3u7fWCKGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e4794e6-916a-4e9b-8b61-80061c9eb6c1",
                            TwoFactorEnabled = false,
                            UserName = "user1@example"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("advertisementToFindId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("advertisementToFindId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.Property<Guid>("UserGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserGroup");
                });

            modelBuilder.Entity("AdvertisementToFindGame", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementToFind", null)
                        .WithMany()
                        .HasForeignKey("AdvertisementsToFindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeveloperGame", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGameAccount", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.GameAccount", null)
                        .WithMany()
                        .HasForeignKey("GameAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameLanguage", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementForSales", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementStatus", "advertisementStatus")
                        .WithMany("AdvertisementsForSales")
                        .HasForeignKey("advertisementStatusId");

                    b.HasOne("TeamManager.Core.Entities.GameAccount", "gameAccount")
                        .WithMany("AdvertisementForSales")
                        .HasForeignKey("gameAccountId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("AdvertisementForSales")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("advertisementStatus");

                    b.Navigation("gameAccount");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementToFind", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.UserGroup", "userGroup")
                        .WithMany()
                        .HasForeignKey("userGroupId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("AdvertisementsToFind")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("userGroup");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Platform", "accountPlatform")
                        .WithMany("GameAccounts")
                        .HasForeignKey("accountPlatformId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("GameAccounts")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("accountPlatform");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.UserGroup", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementToFind", "advertisementToFind")
                        .WithMany()
                        .HasForeignKey("advertisementToFindId");

                    b.Navigation("advertisementToFind");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementStatus", b =>
                {
                    b.Navigation("AdvertisementsForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.Navigation("AdvertisementForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Platform", b =>
                {
                    b.Navigation("GameAccounts");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.User", b =>
                {
                    b.Navigation("AdvertisementForSales");

                    b.Navigation("AdvertisementsToFind");

                    b.Navigation("GameAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
