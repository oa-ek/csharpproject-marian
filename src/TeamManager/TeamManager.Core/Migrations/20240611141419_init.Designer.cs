// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamManager.Core.Contrext;

#nullable disable

namespace TeamManager.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240611141419_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdvertisementToFindGame", b =>
                {
                    b.Property<Guid>("AdvertisementsToFindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdvertisementsToFindId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("AdvertisementToFindGame");
                });

            modelBuilder.Entity("DeveloperGame", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DevelopersId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("DeveloperGame");
                });

            modelBuilder.Entity("GameGameAccount", b =>
                {
                    b.Property<Guid>("GameAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameAccountsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameAccount");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameLanguage", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("GameLanguage");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6f4e915-ca2e-41a1-8cc4-12326708d222"),
                            ConcurrencyStamp = "a6f4e915-ca2e-41a1-8cc4-12326708d222",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("9045aa92-53c7-4cbf-937e-5a14db9ee8dd"),
                            ConcurrencyStamp = "9045aa92-53c7-4cbf-937e-5a14db9ee8dd",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7422c656-7bd9-48c5-b0f7-8a357b255fbc"),
                            RoleId = new Guid("a6f4e915-ca2e-41a1-8cc4-12326708d222")
                        },
                        new
                        {
                            UserId = new Guid("7b652e71-2e95-4c5b-b6bf-97b276e2f4e1"),
                            RoleId = new Guid("9045aa92-53c7-4cbf-937e-5a14db9ee8dd")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementForSales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("advertisementStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("gameAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("advertisementStatusId");

                    b.HasIndex("gameAccountId");

                    b.HasIndex("userId");

                    b.ToTable("AdvertisementsForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertisementStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1c04aee-ef66-4c56-b86f-15bf8851f800"),
                            Name = "For Rent"
                        },
                        new
                        {
                            Id = new Guid("46d438d4-d5b9-42cf-b9f6-302ab1cbef7e"),
                            Name = "For Sale"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementToFind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("AdvertisementsToFind");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b54b951a-a501-4f6a-bbad-c55c665c3ea1"),
                            Name = "Rockstar Games"
                        },
                        new
                        {
                            Id = new Guid("5ed61fc8-7796-49bc-be87-4aab4577e994"),
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("74e4ae96-e4c6-40f6-ac0f-f92848dd1bf1"),
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            Id = new Guid("d49f6ca3-2933-4f58-9c71-a068a447c4c1"),
                            Name = "Square Enix"
                        },
                        new
                        {
                            Id = new Guid("307ce386-2cd9-4656-9918-9e33fee121ff"),
                            Name = "CD Projekt"
                        },
                        new
                        {
                            Id = new Guid("09de799b-a01d-4792-aef1-c25e8a5a126a"),
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = new Guid("0c1c92f2-82c2-4e33-90f2-585685c39133"),
                            Name = "Naughty Dog"
                        },
                        new
                        {
                            Id = new Guid("ead91a0b-7f8c-47e6-8fd8-30482e863cf6"),
                            Name = "Valve Corporation"
                        },
                        new
                        {
                            Id = new Guid("bd7a4c5e-a4eb-48a0-a8e1-de9eb2ea753b"),
                            Name = "Epic Games"
                        },
                        new
                        {
                            Id = new Guid("85e42204-1a95-41c6-b497-7e92e538a222"),
                            Name = "Activision Blizzard"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("accountPlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("accountPlatformId");

                    b.HasIndex("userId");

                    b.ToTable("GameAccounts");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0db78115-acb6-44f9-8ffa-cc3f3db7073a"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("23075d1e-a61a-4402-a24b-64c2a72a2f68"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("a79565e8-801b-40f7-afee-a23734048997"),
                            Name = "Role-playing"
                        },
                        new
                        {
                            Id = new Guid("2940dae4-0311-4ab0-b657-e0209819cf7a"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("53c0bf54-ee89-478a-aec2-003b182eaf29"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("2ff38ee2-573c-4e85-894f-c73f16517757"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("bcf12f77-dcd3-4f48-b649-92eabeeff190"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("8418089d-0305-40b2-bc07-4ae35c0c5643"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("e978e806-21ac-49ce-be19-a6f0a4fc2b1f"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("0a387b63-9236-48f0-85b0-3387a17ee1ba"),
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29d081b4-1d77-41f0-8da4-5e9198758026"),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("d05c8a83-d2b7-4bd8-b036-324679c43e5c"),
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = new Guid("11bc7c55-9e45-4222-bdcd-2c3724397cbe"),
                            Name = "French"
                        },
                        new
                        {
                            Id = new Guid("8ee36d93-8983-4d9c-81dd-5dbce710b57f"),
                            Name = "German"
                        },
                        new
                        {
                            Id = new Guid("c69671a6-cb6d-44d9-9b76-23adffdd55bb"),
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("138d7131-df09-4306-a3fe-f0e59d636823"),
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = new Guid("1442f295-4419-46a2-82c7-88803f9f609c"),
                            Name = "Russian"
                        },
                        new
                        {
                            Id = new Guid("33ad071e-8a1c-449a-ae07-520859d45122"),
                            Name = "Italian"
                        },
                        new
                        {
                            Id = new Guid("8912123e-4dba-46e4-8935-59a4553d8efa"),
                            Name = "Korean"
                        },
                        new
                        {
                            Id = new Guid("d503957f-8d1c-407c-ad1f-b2fd0971edc4"),
                            Name = "Portuguese"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34f9247e-ee09-4541-86da-acdbdc6f9240"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("c3a672b6-1d3c-4dfd-9d87-b49fbb35661d"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("1ba25d53-0f71-45ae-896f-ebd6a808b0f5"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("57b93897-6dc3-454e-95c2-8b9aea1459a2"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("d0a6e504-cf98-4724-93a5-fbcb2057b996"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("2fad8c04-3f12-4dd0-9c6f-5a8102eb7da3"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("068bc1ac-00bd-44dc-bbd9-317c8fb515e3"),
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("5eb320c0-8180-4ffa-b2c3-aba3250d4e0e"),
                            Name = "Google Stadia"
                        },
                        new
                        {
                            Id = new Guid("dab05315-9a85-4c33-be4b-da7db98df8fb"),
                            Name = "VR"
                        },
                        new
                        {
                            Id = new Guid("729e1423-fb69-4d8b-ba1b-0829a003b620"),
                            Name = "Mac"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7422c656-7bd9-48c5-b0f7-8a357b255fbc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d13f8d0b-7b7f-4a59-8b69-ce13794907b4",
                            Email = "admin@example",
                            EmailConfirmed = true,
                            FullName = "Jack Rell",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE",
                            NormalizedUserName = "ADMIN@EXAMPLE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFfXHQWA2WmDwstGn35mjHYUS9WjB0uoaw0s7WQnlQ6l136cWN8hUjHpWx/NATZOOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5cd82eb-2cfc-4fe6-bf0e-226d6ceeb654",
                            TwoFactorEnabled = false,
                            UserName = "admin@example"
                        },
                        new
                        {
                            Id = new Guid("7b652e71-2e95-4c5b-b6bf-97b276e2f4e1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06a75df1-b59c-4841-8e62-73c3c1a0b08d",
                            Email = "user1@example",
                            EmailConfirmed = true,
                            FullName = "Tom Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE",
                            NormalizedUserName = "USER1@EXAMPLE",
                            PasswordHash = "AQAAAAIAAYagAAAAECkSsnpNNCNA5HBfj1Ro67MirN+S2ov2f5w0MhlnTDNvMUJZL1jwtYGwHmuJQrOmhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a3be8b4-3644-4a28-9293-c7ea085d8ce2",
                            TwoFactorEnabled = false,
                            UserName = "user1@example"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.Property<Guid>("UserGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserGroup");
                });

            modelBuilder.Entity("AdvertisementToFindGame", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementToFind", null)
                        .WithMany()
                        .HasForeignKey("AdvertisementsToFindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeveloperGame", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGameAccount", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.GameAccount", null)
                        .WithMany()
                        .HasForeignKey("GameAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameLanguage", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementForSales", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementStatus", "advertisementStatus")
                        .WithMany("AdvertisementsForSales")
                        .HasForeignKey("advertisementStatusId");

                    b.HasOne("TeamManager.Core.Entities.GameAccount", "gameAccount")
                        .WithMany("AdvertisementForSales")
                        .HasForeignKey("gameAccountId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("AdvertisementForSales")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("advertisementStatus");

                    b.Navigation("gameAccount");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementToFind", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("AdvertisementsToFind")
                        .HasForeignKey("userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Platform", "accountPlatform")
                        .WithMany("GameAccounts")
                        .HasForeignKey("accountPlatformId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("GameAccounts")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("accountPlatform");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementStatus", b =>
                {
                    b.Navigation("AdvertisementsForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.Navigation("AdvertisementForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Platform", b =>
                {
                    b.Navigation("GameAccounts");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.User", b =>
                {
                    b.Navigation("AdvertisementForSales");

                    b.Navigation("AdvertisementsToFind");

                    b.Navigation("GameAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
