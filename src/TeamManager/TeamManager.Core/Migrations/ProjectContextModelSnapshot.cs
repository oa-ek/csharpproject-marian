// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamManager.Core.Contrext;

#nullable disable

namespace TeamManager.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdvertisementToFindGame", b =>
                {
                    b.Property<Guid>("AdvertisementsToFindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdvertisementsToFindId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("AdvertisementToFindGame");
                });

            modelBuilder.Entity("DeveloperGame", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DevelopersId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("DeveloperGame");
                });

            modelBuilder.Entity("GameGameAccount", b =>
                {
                    b.Property<Guid>("GameAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameAccountsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameAccount");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameLanguage", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("GameLanguage");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fa527d4-3fca-44ee-a8b0-ffd47b2fbd36"),
                            ConcurrencyStamp = "4fa527d4-3fca-44ee-a8b0-ffd47b2fbd36",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("a567e4e2-b863-4d23-be56-a42ed2bdf07b"),
                            ConcurrencyStamp = "a567e4e2-b863-4d23-be56-a42ed2bdf07b",
                            Name = "Finder",
                            NormalizedName = "FINDER"
                        },
                        new
                        {
                            Id = new Guid("4d139ca3-4b26-4ab0-96ef-4a4ab1ca8a4a"),
                            ConcurrencyStamp = "4d139ca3-4b26-4ab0-96ef-4a4ab1ca8a4a",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8a26ca90-342f-46e2-8baf-6833760bd301"),
                            RoleId = new Guid("4fa527d4-3fca-44ee-a8b0-ffd47b2fbd36")
                        },
                        new
                        {
                            UserId = new Guid("425c81db-c14c-42a7-a5d7-33f34e1607dd"),
                            RoleId = new Guid("a567e4e2-b863-4d23-be56-a42ed2bdf07b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementForSales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("advertisementStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("gameAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("advertisementStatusId");

                    b.HasIndex("gameAccountId");

                    b.HasIndex("userId");

                    b.ToTable("AdvertisementsForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertisementStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06921c4b-0398-434d-8420-1c2eae237391"),
                            Name = "For Rent"
                        },
                        new
                        {
                            Id = new Guid("129b6d7f-a9e1-4649-927d-a683dd54ca77"),
                            Name = "For Sale"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementToFind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("AdvertisementsToFind");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2f25ba9-3313-48cd-a18d-c1fb61bfe7a1"),
                            Name = "Rockstar Games"
                        },
                        new
                        {
                            Id = new Guid("35cab4c9-db5f-4d0c-8865-60035a1c7a15"),
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("a5f5599f-3624-42e7-a900-1cda9dd23816"),
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            Id = new Guid("f449d784-43bb-485d-9a45-465c43799795"),
                            Name = "Square Enix"
                        },
                        new
                        {
                            Id = new Guid("f21a16ef-e111-424b-b251-d8bd45176395"),
                            Name = "CD Projekt"
                        },
                        new
                        {
                            Id = new Guid("bdb52390-e687-4ff5-ba79-c78fdd9b5ee9"),
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = new Guid("c5b9e6d6-6fa6-42d3-a23d-beb1c6a4faf1"),
                            Name = "Naughty Dog"
                        },
                        new
                        {
                            Id = new Guid("cc3b2959-68c7-49b2-8ecf-39ec1e04ee04"),
                            Name = "Valve Corporation"
                        },
                        new
                        {
                            Id = new Guid("37832d8a-b075-4ca5-970f-9d4f476b99c5"),
                            Name = "Epic Games"
                        },
                        new
                        {
                            Id = new Guid("409fb89d-6c25-4990-ac5f-a2fae80ee8d0"),
                            Name = "Activision Blizzard"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("accountPlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("accountPlatformId");

                    b.HasIndex("userId");

                    b.ToTable("GameAccounts");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0616763f-bece-4bea-b0db-017fb4eb260c"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("338165ff-1216-40ee-9cc2-8b6ef1704ec7"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("0f9c711d-622a-4b6a-b8ca-3af0de0b32d6"),
                            Name = "Role-playing"
                        },
                        new
                        {
                            Id = new Guid("21a95737-eed0-4a8a-8509-ef2bd39615c3"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("06539677-bd73-4c35-b857-8b63751e3113"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("996a1a17-6422-4135-baf6-21576e59498e"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("7f27fa01-7ec6-41cd-97a2-188e407e46b6"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("764b09de-2c07-4027-be0d-e5a1ac8d126c"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("57c50244-4968-4aad-81cb-39958bcdc7fe"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("20762f4e-d15a-423e-a235-80d476e99df0"),
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08022f4d-ae3d-4258-ba53-5d21cc65050b"),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("b4c43182-a089-4c15-affd-47d50c9aa915"),
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = new Guid("e524fa40-d22d-4504-b7f6-b3f481397748"),
                            Name = "French"
                        },
                        new
                        {
                            Id = new Guid("f0f7221f-f152-48ed-a2c6-9f480bae3e53"),
                            Name = "German"
                        },
                        new
                        {
                            Id = new Guid("21cd1d7d-181d-44c8-8e43-22eec772a3d1"),
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("f84e3f5d-ccf8-466c-a842-4bd630f75ba5"),
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = new Guid("0859bb4d-d6e5-48a1-97cd-b978fc7d5cc6"),
                            Name = "Russian"
                        },
                        new
                        {
                            Id = new Guid("3cc0f342-d349-4b32-a5c1-c1b901d06f00"),
                            Name = "Italian"
                        },
                        new
                        {
                            Id = new Guid("55ab9fa4-310b-41a3-a6c4-39859f2327c1"),
                            Name = "Korean"
                        },
                        new
                        {
                            Id = new Guid("bd4e6e3c-142f-4b2a-9c8d-6e10fe5b2e84"),
                            Name = "Portuguese"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71ac820-2077-4cef-ba40-9dc5d7ed1e3d"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("e7fc5b06-ab60-468a-9af1-69440a1e31ef"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("03edc1bb-725a-489a-a1e6-da16042f7c57"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("454da605-3919-466a-9341-def4777e8d45"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("8c09730e-f5f1-45bf-9145-33a21ea17336"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("ef954be8-1280-4605-bb4f-57de307957ba"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("ec7f160f-0a09-4076-a022-15cb76978572"),
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("3ef672fb-13a2-4c86-b073-4cc0ecb35e92"),
                            Name = "Google Stadia"
                        },
                        new
                        {
                            Id = new Guid("75640dbb-8325-440f-9bdb-85febf36c4d7"),
                            Name = "VR"
                        },
                        new
                        {
                            Id = new Guid("863a4429-12eb-483d-9f98-09c825669b6b"),
                            Name = "Mac"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a26ca90-342f-46e2-8baf-6833760bd301"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5b22dc9-a650-44ec-acf9-20ebd4f8ab17",
                            Email = "admin@example",
                            EmailConfirmed = true,
                            FullName = "Jack Rell",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE",
                            NormalizedUserName = "ADMIN@EXAMPLE",
                            PasswordHash = "AQAAAAIAAYagAAAAEM0xzr8jMoLXY+yQDZZdqh7Ecsz0u0ugAXfGDE+SEipKyPo9Ym2xeGq3zPquIG6lMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0ee28ca-28a4-486d-bca8-234addd41373",
                            TwoFactorEnabled = false,
                            UserName = "admin@example"
                        },
                        new
                        {
                            Id = new Guid("425c81db-c14c-42a7-a5d7-33f34e1607dd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a971cf36-1ab5-46de-8120-7ad3bcfa3e47",
                            Email = "finder@example",
                            EmailConfirmed = true,
                            FullName = "Tom Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "FINDER@EXAMPLE",
                            NormalizedUserName = "FINDER@EXAMPLE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDYxtbBbrgHuGTQ6wwldhH+4ZNZSCRg26gfbf3iIaZ2ZeoolgxclraYtBiBiJzCCjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72d5a34a-a42e-4886-86ab-749756718dfd",
                            TwoFactorEnabled = false,
                            UserName = "finder@example"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.Property<Guid>("UserGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserGroup");
                });

            modelBuilder.Entity("AdvertisementToFindGame", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementToFind", null)
                        .WithMany()
                        .HasForeignKey("AdvertisementsToFindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeveloperGame", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGameAccount", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.GameAccount", null)
                        .WithMany()
                        .HasForeignKey("GameAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameLanguage", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementForSales", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementStatus", "advertisementStatus")
                        .WithMany("AdvertisementsForSales")
                        .HasForeignKey("advertisementStatusId");

                    b.HasOne("TeamManager.Core.Entities.GameAccount", "gameAccount")
                        .WithMany()
                        .HasForeignKey("gameAccountId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("advertisementStatus");

                    b.Navigation("gameAccount");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementToFind", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("AdvertisementsToFind")
                        .HasForeignKey("userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Platform", "accountPlatform")
                        .WithMany("GameAccounts")
                        .HasForeignKey("accountPlatformId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("GameAccounts")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("accountPlatform");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementStatus", b =>
                {
                    b.Navigation("AdvertisementsForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Platform", b =>
                {
                    b.Navigation("GameAccounts");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.User", b =>
                {
                    b.Navigation("AdvertisementsToFind");

                    b.Navigation("GameAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
