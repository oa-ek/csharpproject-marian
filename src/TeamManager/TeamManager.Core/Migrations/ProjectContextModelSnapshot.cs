// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamManager.Core.Contrext;

#nullable disable

namespace TeamManager.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdvertisementToFindGame", b =>
                {
                    b.Property<Guid>("AdvertisementsToFindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdvertisementsToFindId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("AdvertisementToFindGame");
                });

            modelBuilder.Entity("DeveloperGame", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DevelopersId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("DeveloperGame");
                });

            modelBuilder.Entity("GameGameAccount", b =>
                {
                    b.Property<Guid>("GameAccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameAccountsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameAccount");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameLanguage", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("GameLanguage");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8169307e-6fe3-4727-9cd5-79f6ecc20d0b"),
                            ConcurrencyStamp = "8169307e-6fe3-4727-9cd5-79f6ecc20d0b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("eb9dd9e4-39c9-4650-a561-10959715f1ed"),
                            ConcurrencyStamp = "eb9dd9e4-39c9-4650-a561-10959715f1ed",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f79bc2a3-ce8b-4665-b84c-8e9f8f3d1fc8"),
                            RoleId = new Guid("8169307e-6fe3-4727-9cd5-79f6ecc20d0b")
                        },
                        new
                        {
                            UserId = new Guid("352cf391-77ea-415d-9457-632dba19b32c"),
                            RoleId = new Guid("eb9dd9e4-39c9-4650-a561-10959715f1ed")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementForSales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("advertisementStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("gameAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("advertisementStatusId");

                    b.HasIndex("gameAccountId");

                    b.HasIndex("userId");

                    b.ToTable("AdvertisementsForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertisementStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92df00a4-822c-4732-9904-5f98837c9056"),
                            Name = "For Rent"
                        },
                        new
                        {
                            Id = new Guid("cd86ffa7-ef57-4031-9912-8b66f6968ec5"),
                            Name = "For Sale"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementToFind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("userGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("userGroupId");

                    b.HasIndex("userId");

                    b.ToTable("AdvertisementsToFind");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74921198-0faf-43e4-8526-1aec2ac8f833"),
                            Name = "Rockstar Games"
                        },
                        new
                        {
                            Id = new Guid("679b1be9-f9ee-48d9-9a06-02259e226f4e"),
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("5fcadcbd-d7d2-4d92-9bd8-172cfb44e350"),
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            Id = new Guid("637ffc9b-c37d-447b-9bd0-6ab3747ad158"),
                            Name = "Square Enix"
                        },
                        new
                        {
                            Id = new Guid("b8966b2f-6d19-4399-9281-bdb121816406"),
                            Name = "CD Projekt"
                        },
                        new
                        {
                            Id = new Guid("c40bd541-3531-4132-9757-5437b755f946"),
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = new Guid("66ec9a49-1253-48c9-983d-b7b28e9a1ae0"),
                            Name = "Naughty Dog"
                        },
                        new
                        {
                            Id = new Guid("541a2f7e-c379-4216-92bf-4f2dd81d4673"),
                            Name = "Valve Corporation"
                        },
                        new
                        {
                            Id = new Guid("cc93c261-b4d5-47ff-a5e1-410481ffc472"),
                            Name = "Epic Games"
                        },
                        new
                        {
                            Id = new Guid("15f30551-b127-42fa-b8a2-0ae25dcfaf2e"),
                            Name = "Activision Blizzard"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("accountPlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("accountPlatformId");

                    b.HasIndex("userId");

                    b.ToTable("GameAccounts");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06a41972-ef39-47bc-bd85-775a12b56f44"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("639caea8-dbb1-4e9e-94b5-1247fd952e40"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("65010ccf-e200-45b5-9670-926104138a17"),
                            Name = "Role-playing"
                        },
                        new
                        {
                            Id = new Guid("75036812-712a-40b8-a5ee-2aaa7b86329a"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("50b352e5-d5d3-4bfb-89f8-35d98ead7251"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("fdc114a8-ab43-4c29-9b3b-968d9627d8ea"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("627efb38-6c4d-4c99-9638-cc538a7d4b4f"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("8556a959-19d9-4fd8-afbf-ea00b0e9f3b9"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("dd21f4fe-afa2-4f4d-9098-a4703ca1ef56"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("13a5f0ad-f962-466c-a423-530f047e29d0"),
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd9afa8f-8426-425d-b286-431da244707d"),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("9cc3bb54-9e4d-45fc-a44d-3635826bfc98"),
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = new Guid("420d448a-5a45-40dc-9278-13583611c341"),
                            Name = "French"
                        },
                        new
                        {
                            Id = new Guid("1a5eb16e-a1de-4f9f-bb39-3614b48081ea"),
                            Name = "German"
                        },
                        new
                        {
                            Id = new Guid("94947646-3e19-4c6d-9e77-2ab95522caab"),
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("f19788a8-c555-492d-b28e-ed29c114cf66"),
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = new Guid("3a845faa-95ac-4177-83a2-115a997e2612"),
                            Name = "Russian"
                        },
                        new
                        {
                            Id = new Guid("b790dd13-9964-4918-8e73-bb05be0c96dd"),
                            Name = "Italian"
                        },
                        new
                        {
                            Id = new Guid("17e649da-def5-4637-8f13-dac2d4ce264e"),
                            Name = "Korean"
                        },
                        new
                        {
                            Id = new Guid("ecf6109b-33de-4f92-b701-9a40c1c071b1"),
                            Name = "Portuguese"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26667bab-f3a2-44e7-89fb-badd744ea190"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("2e94722a-7bb7-4f46-b852-51bbf135ed7e"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("7ec1322f-5a6f-43f1-a25f-ab15cf40390e"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("58dddb06-1d0f-4b6d-8a90-22c10a1acede"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("9062a58e-eb83-42ff-97b4-7a5ec9d47827"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("d241252d-c2b0-4901-988e-bf54b4293435"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("1b98be6b-8279-41b4-a00d-44b5346d67c8"),
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("d6909b00-44a0-4a62-91a2-defb681f2bec"),
                            Name = "Google Stadia"
                        },
                        new
                        {
                            Id = new Guid("7acac67f-cbdf-4418-9da7-a275d9788f9e"),
                            Name = "VR"
                        },
                        new
                        {
                            Id = new Guid("be867c45-e679-41f9-8411-d08e7620eca3"),
                            Name = "Mac"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f79bc2a3-ce8b-4665-b84c-8e9f8f3d1fc8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7ab61e6-88e9-4dbe-9748-17bf6ba7b421",
                            Email = "admin@example",
                            EmailConfirmed = true,
                            FullName = "Jack Rell",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE",
                            NormalizedUserName = "ADMIN@EXAMPLE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGXls0it2IgvbSNopR0JFrJPf16iFET2zAMKAhIrCfsV7f5DylJB9YyJhm2vNUq2/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c15d414-9720-4d1d-bf11-222a5bea4327",
                            TwoFactorEnabled = false,
                            UserName = "admin@example"
                        },
                        new
                        {
                            Id = new Guid("352cf391-77ea-415d-9457-632dba19b32c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "586b938c-e7ba-4426-bc95-ddc07abf1e37",
                            Email = "user1@example",
                            EmailConfirmed = true,
                            FullName = "Tom Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE",
                            NormalizedUserName = "USER1@EXAMPLE",
                            PasswordHash = "AQAAAAIAAYagAAAAEL24LZbPBQRwY/Bu5HSjtIDfpIqviqDILfXh/FAffcO0e5QG5QFmKb1jmCT34AtaXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0856462-16a3-469f-a786-f3ca45fd7967",
                            TwoFactorEnabled = false,
                            UserName = "user1@example"
                        });
                });

            modelBuilder.Entity("TeamManager.Core.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("advertisementToFindId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("advertisementToFindId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.Property<Guid>("UserGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserGroup");
                });

            modelBuilder.Entity("AdvertisementToFindGame", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementToFind", null)
                        .WithMany()
                        .HasForeignKey("AdvertisementsToFindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeveloperGame", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGameAccount", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.GameAccount", null)
                        .WithMany()
                        .HasForeignKey("GameAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameLanguage", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementForSales", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementStatus", "advertisementStatus")
                        .WithMany("AdvertisementsForSales")
                        .HasForeignKey("advertisementStatusId");

                    b.HasOne("TeamManager.Core.Entities.GameAccount", "gameAccount")
                        .WithMany("AdvertisementForSales")
                        .HasForeignKey("gameAccountId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("AdvertisementForSales")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("advertisementStatus");

                    b.Navigation("gameAccount");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementToFind", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.UserGroup", "userGroup")
                        .WithMany()
                        .HasForeignKey("userGroupId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("AdvertisementsToFind")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("userGroup");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.Platform", "accountPlatform")
                        .WithMany("GameAccounts")
                        .HasForeignKey("accountPlatformId");

                    b.HasOne("TeamManager.Core.Entities.User", "User")
                        .WithMany("GameAccounts")
                        .HasForeignKey("userId");

                    b.Navigation("User");

                    b.Navigation("accountPlatform");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.UserGroup", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.AdvertisementToFind", "advertisementToFind")
                        .WithMany()
                        .HasForeignKey("advertisementToFindId");

                    b.Navigation("advertisementToFind");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.HasOne("TeamManager.Core.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamManager.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamManager.Core.Entities.AdvertisementStatus", b =>
                {
                    b.Navigation("AdvertisementsForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.GameAccount", b =>
                {
                    b.Navigation("AdvertisementForSales");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.Platform", b =>
                {
                    b.Navigation("GameAccounts");
                });

            modelBuilder.Entity("TeamManager.Core.Entities.User", b =>
                {
                    b.Navigation("AdvertisementForSales");

                    b.Navigation("AdvertisementsToFind");

                    b.Navigation("GameAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
